generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
  output   = "../src/Database/Internal"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://antegral:hsq%249TiaW738kxzwdNxmTDh%21%25mp%5ESHE8fXNNaY%40V@192.168.1.100:47293/antegral?schema=chatanium"
}

model attechments {
  id         BigInt   @id(map: "pk_1")
  message_id BigInt
  content    String
  messages   messages @relation(fields: [message_id], references: [message_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_9")
}

model channels {
  id          BigInt     @id(map: "pk_2")
  guild_id    BigInt
  name        String     @db.VarChar(25)
  description String?    @db.VarChar(1000)
  created_at  DateTime   @db.Timestamp(6)
  deleted_at  DateTime?  @db.Timestamp(6)
  guilds      guilds     @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_7")
  messages    messages[]
}

model guilds {
  id         BigInt       @id(map: "pk_3")
  name       String       @db.VarChar(100)
  owner_id   BigInt
  channels   channels[]
  users      users        @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_2")
  guildusers guildusers[]
  messages   messages[]
  moduleacl  moduleacl?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model guildusers {
  guild_id   BigInt
  created_at DateTime  @db.Timestamp(6)
  quit_at    DateTime? @db.Timestamp(6)
  user_id    BigInt
  nickname   String    @db.VarChar(32)
  uuid       String    @id(map: "pk_4") @db.Uuid
  guilds     guilds    @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_3")
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_4")
}

model kvstorages {
  user_id BigInt @id(map: "pk_5")
  key     String
  value   String
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_6")
}

model messages {
  message_id   BigInt        @id(map: "pk_6")
  type         Int           @db.SmallInt
  guild_id     BigInt?
  channel_id   BigInt?
  user_id      BigInt
  contents     String?
  reference_id BigInt?
  created_at   DateTime      @db.Timestamp(6)
  attechments  attechments[]
  channels     channels?     @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_10")
  guilds       guilds?       @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_4")
  users        users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5")
}

model moduleacl {
  guild_id        BigInt   @id(map: "pk_8")
  allowed_modules String[]
  guilds          guilds   @relation(fields: [guild_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_10_1")
}

model users {
  id         BigInt       @id(map: "pk_7")
  username   String       @db.Char(32)
  created_at DateTime     @db.Timestamp(6)
  deleted_at DateTime?    @db.Timestamp(6)
  guilds     guilds[]
  guildusers guildusers[]
  kvstorages kvstorages?
  messages   messages[]
}
